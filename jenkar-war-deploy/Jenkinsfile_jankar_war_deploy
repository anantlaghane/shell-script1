pipeline {
    agent any

    environment {
        //ARTIFACTORY_URL = "http://your-artifactory-server:8081/artifactory"
        ARTIFACTORY = 'Artifactory'
        DOCKER_REGISTRY = "https://index.docker.io/v1/"  // ✅ Docker Hub ka correct URL add kiya hai
        DOCKER_IMAGE_NAME = "anantlaghane/jenkar-war-deploy"  // ✅ docker image name yeh hona chahiye 
        IMAGE_NAME = "jenkar-war-deploy"
        SONARQUBE = "Sonar"  // Jenkins SonarQube server name
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
    }

    stages {
         stage('Checkout Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
              }
            }

        // stage('SonarQube Analysis') {
        //     steps {
        //         script {
        //             withSonarQubeEnv(SONARQUBE) {
        //                  dir('jenkar-war-deploy') {
        //             sh 'mvn clean verify sonar:sonar'
        //         }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            steps {
                    dir('jenkar-war-deploy') {
                        sh 'mvn clean package'
                    }
            }
        }

         stage('Publish to Artifactory') {
            steps {
                dir('jenkar-war-deploy') {
                    sh '''
                    WAR_FILE=$(ls target/jenkar-war-deploy-*.war | head -n 1)
                    echo "Uploading $WAR_FILE"
                    curl -u admin:Anant@123 -T "$WAR_FILE" http://172.26.170.164:8082/artifactory/libs-release-local/jenkar-war-deploy/
                    '''
                }
            }
        }

         stage('Build Docker Image') {
            steps {
                dir('jenkar-war-deploy') {
                    script {
                        docker.build("${DOCKER_IMAGE_NAME}:latest", ".")
                    }
                }
            }
        }

          stage('Push Docker Image') {
            steps {
                dir('jenkar-war-deploy') {
                    script {
                        docker.withRegistry("${DOCKER_REGISTRY}", 'docker') {
                            docker.image("${DOCKER_IMAGE_NAME}:latest").push()
                        }
                    }
                }
            }
        }

        stage('Run Docker Locally') {
    steps {
        script {
            // Stop and remove any old container
            sh 'docker rm -f test-app || true'

            // Run container mapping port 8085
            sh 'docker run -d -p 8086:8086 --name test-app anantlaghane/jenkar-war-deploy:latest'
        }
    }
}


        // stage('Deploy to Kubernetes') {
        //     steps {
        //      sh 'kubectl get nodes'
        //     dir('jenkar-war-deploy') {
        //     withEnv(["KUBECONFIG=${env.KUBECONFIG}"]) {
        //         sh "kubectl apply -f k8s/deployment.yaml"
        //         sh "kubectl apply -f k8s/service.yaml"
        //     }
        // }
        //     }
        // }
        
        // stage('Post Deploy Verification') {
        //     steps {
        //          dir('jenkar-war-deploy') {
        //             sh 'ping -c 4 192.168.98.128'
        //             sh 'ping -c 4 172.26.170.164'
        //         sh "sleep 20"  // wait for pods to come up
        //     sh "curl -f http://172.26.170.164:31000/health || exit 1"
        //          }
        //     }
        // }
        // stage('Post Deploy Verification') {
        //     steps {
        //         dir('jenkar-war-deploy') {
        //             withEnv(["KUBECONFIG=${env.KUBECONFIG}"]) {

        //                 // ✅ Step 1: Wait for deployment to roll out
        //                 sh 'kubectl rollout status deployment/jenkar-war-deploy -n default --timeout=60s'

        //                 // ✅ Step 2: Show pod status
        //                 sh 'kubectl get pods -n default'

        //                 // ✅ Step 3: Wait for service to be ready
        //                 sh 'sleep 20'

        //                 // ✅ Step 4: Use wget instead of curl for health check
        //                 sh 'wget --spider --tries=3 --timeout=5 http://172.26.170.164:31000/health || exit 1'
        //             }
        //         }
        //     }
        // }
    }
}
