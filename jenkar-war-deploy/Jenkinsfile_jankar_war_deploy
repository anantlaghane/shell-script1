pipeline {
    agent any

    environment {
        //ARTIFACTORY_URL = "http://your-artifactory-server:8081/artifactory"
        ARTIFACTORY = 'Artifactory'
        DOCKER_REGISTRY = "your-docker-registry"
        IMAGE_NAME = "jenkar-war-deploy"
        SONARQUBE = "Sonar"  // Jenkins SonarQube server name
    }

    stages {
         stage('Checkout Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
              }
            }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(SONARQUBE) {
                         dir('jenkar-war-deploy') {
                    sh 'mvn clean verify sonar:sonar'
                }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                    dir('jenkar-war-deploy') {
                        sh 'mvn clean package'
                    }
            }
        }

        stage('Publish to Artifactory') {
            steps {
                    sh '''
                    WAR_FILE=$(ls target/jenkar-war-deploy-*.war | head -n 1)
                    echo "Uploading $WAR_FILE"
                    curl -u admin:Anant@123 -T "$WAR_FILE" http://172.26.170.164:8082/artifactory/libs-release-local/jenkar-war-deploy/
'''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials-id') {
                        docker.image("${DOCKER_REGISTRY}/${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh "kubectl apply -f k8s/deployment.yaml"
                sh "kubectl apply -f k8s/service.yaml"
            }
        }
        
        stage('Post Deploy Verification') {
            steps {
                sh "sleep 20"  // wait for pods to come up
                sh "curl -f http://<loadbalancer-ip-or-node-ip>:80/health || exit 1"
            }
        }
    }
}
