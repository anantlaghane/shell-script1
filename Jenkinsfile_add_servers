pipeline {
    agent any

   // options {
    //    buildDiscarder(logRotator(numToKeepStr: '60'))
     //   ansiColor('xterm')  // Enable colored output
  //  }

    parameters {
        string(name: 'env',
               description: 'Comma-separated environments (e.g. dev,qa,prod)')
        string(name: 'name_of_the_server',
               description: 'Comma-separated server names (e.g. web01,web02)')
        string(name: 'on_which_instances',
               defaultValue: '',
               description: 'Limit to specific instances (optional, e.g. app,db)')
        string(name: 'additional_config_values',
               defaultValue: '',
               description: 'Extra Ansible variables (optional)')
        choice(name: 'BRANCH',
               choices: ['main', 'develop', 'feature'],
               description: 'Git branch to checkout')
    }

    stages {

        stage('Checkout Git') {
            steps {
               // dir ('/home/anantlaghane/jenkins_workspace') {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*main"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
            //}
            }
        }

//sh "export ANSIBLE_FORCE_COLOR=true; ansible-playbook -i inventory/hosts agentAutomation_all.yml --extra-vars env=${item1} --extra-vars name_of_the_server=${

//--extra-vars additional_config_values='${additional_config_values)'"


        stage('Agent Automation') {
            steps {
                dir('ansible/scripts') {
                    script {
                      String[] myEnv = params.env.split(",");
                      String[] myServer = params.name_of_the_server.split(",");

                     // String[] instances = params.on_which_instances.split(",");
                    //int itemCount instances.size();
                       // def serverList  = params.name_of_the_server.tokenize(',')*.trim()
                       // def instanceLim = params.on_which_instances?.trim()
                       // def extraVars   = params.additional_config_values?.trim()

                        for (String item1: myEnv) {
                        for (String item2: myServer) {
                         sh "pwd"
                         sh "./add_servers.sh ${item1} ${item2} ${params.type_of_the_server} ${params.action_on_server} ${params.type_of_the_server}"   
                        }
                        }
                    }
                }
            }
        }
    }
}