pipeline {
    agent any

    tools {
        maven 'Maven-3.9'
    }

    environment {
        ARTIFACTORY = 'Artifactory'
        REPO = 'libs-release-local'
        SONARQUBE = 'Sonar'
        SLACK_CHANNEL = '#devops-alerts' // Agar Slack use karoge
    }

    parameters {
        choice(name: 'ACTION', choices: ['build', 'deploy', 'build-deploy'], description: 'Choose action')
        string(name: 'APP_NAME', defaultValue: 'sample', description: 'App name to deploy')
        choice(name: 'DEPLOY_ENV', choices: ['dev', 'prod'], description: 'Deployment environment')
    }

    stages {

        stage('Checkout Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
            }
        }

        stage('Unit Tests & SonarQube Analysis') {
            parallel {
                stage('Unit Tests') {
                    when { expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' } }
                    steps {
                        sh 'cd my_maven && mvn test'
                    }
                }

                stage('SonarQube Analysis') {
                    when { expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' } }
                    steps {
                        withSonarQubeEnv("${SONARQUBE}") {
                            sh 'cd my_maven && mvn sonar:sonar'
                        }
                    }
                }
            }
        }

        stage('Quality Gate Check') {
            when { expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' } }
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate abortPipeline: false
                        if (qg.status != 'OK') {
                            echo "âš  SonarQube Quality Gate failed: ${qg.status}"
                            // Slack/Email notification example:
                            // slackSend(channel: SLACK_CHANNEL, message: "Quality Gate failed for ${params.APP_NAME}")
                        }
                    }
                }
            }
        }

        stage('Build & Upload WAR') {
            when { expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' } }
            steps {
                script {
                    sh 'cd my_maven && mvn clean package'

                    def server = Artifactory.server("${ARTIFACTORY}")
                    def rtMaven = Artifactory.newMavenBuild()
                    rtMaven.tool = 'Maven-3.9'
                    rtMaven.resolver server: server, releaseRepo: 'maven', snapshotRepo: 'maven'
                    rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-release-local'

                    def buildTime = new Date().format("yyyyMMdd-HHmmss")
                    def buildNumber = currentBuild.number

                    def warFile = sh(script: "ls my_maven/target/*.war | head -1", returnStdout: true).trim()
                    def warName = "${params.APP_NAME}-${buildNumber}-${buildTime}.war"

                    sh "mv ${warFile} my_maven/target/${warName}"
                    env.WAR_NAME = warName

                    def uploadSpec = """{
                        "files": [
                            {"pattern": "my_maven/target/${warName}", "target": "${REPO}/${params.APP_NAME}/"}
                        ]
                    }"""
                    server.upload(spec: uploadSpec)
                }
            }
        }

        stage('Trivy Vulnerability Scan') {
            when { expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' } }
            steps {
                script {
                    echo "Running Trivy scan on WAR file"
                    def warPath = sh(script: "ls my_maven/target/*.war | head -1", returnStdout: true).trim()
                    
                    sh "trivy fs --exit-code 1 --severity HIGH,CRITICAL ${warPath} || true"
                    sh "trivy fs --format json --output my_maven/target/trivy-report.json ${warPath}"
                }
            }
        }

        stage('Deploy to Tomcat') {
            when { expression { params.ACTION == 'deploy' || params.ACTION == 'build-deploy' } }
            steps {
                script {
                    def warPath = sh(script: "ls -t my_maven/target/*.war | head -1", returnStdout: true).trim()
                    def warName = warPath.tokenize('/').last()
                    env.WAR_NAME = warName

                    def tomcatUrl = (params.DEPLOY_ENV == 'dev') ? 
                        "http://localhost:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true" : 
                        "http://prod-server:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true"

                    echo "Deploying ${env.WAR_NAME} to ${params.DEPLOY_ENV} environment"
                    sh """
                        curl -v -u admin:Anant@123 -T my_maven/target/${env.WAR_NAME} \
                        "${tomcatUrl}"
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Sending notifications if needed..."
            // slackSend(channel: SLACK_CHANNEL, message: "Pipeline completed for ${params.APP_NAME}")
        }
    }
}
