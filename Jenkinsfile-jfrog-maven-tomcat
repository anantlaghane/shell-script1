pipeline {
    agent any

    tools {
        maven 'Maven-3.9'
    }

    environment {
        ARTIFACTORY = 'Artifactory'
        REPO = 'libs-release-local'
        SONARQUBE = 'Sonar'
    }

    parameters {
        choice(name: 'ACTION', choices: ['build', 'deploy', 'build-deploy'], description: 'Choose action')
        string(name: 'APP_NAME', defaultValue: 'sample', description: 'App name to deploy')
        choice(name: 'DEPLOY_ENV', choices: ['dev', 'prod'], description: 'Deployment environment')
    }

    stages {
        stage('Checkout Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
            }
        }

        stage('Parallel Build & Scan') {
            when { expression { params.ACTION == 'build' || params.ACTION == 'deploy' || params.ACTION == 'build-deploy' } }
            parallel {
                stage('Run Unit Tests & Build WAR') {
                    steps {
                        script {
                            sh 'cd my_maven && mvn clean package'
                            def warFile = sh(script: "ls my_maven/target/*.war | head -1", returnStdout: true).trim()
                            env.WAR_NAME = warFile.tokenize('/').last()
                        }
                    }
                }

                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv("${SONARQUBE}") {
                            sh 'cd my_maven && mvn sonar:sonar'
                        }
                    }
                }

                stage('Trivy Scan') {
                    steps {
                        script {
                            def warPath = sh(script: "ls my_maven/target/*.war | head -1", returnStdout: true).trim()
                            sh "trivy fs --exit-code 1 --severity HIGH,CRITICAL ${warPath} || true"
                            sh "trivy fs --format json --output my_maven/target/trivy-report.json ${warPath}"
                        }
                    }
                }
            }
        }

        stage('Quality Gate & Alerts') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            echo "⚠️ Quality Gate failed: ${qg.status}"
                            if(params.DEPLOY_ENV == 'prod') {
                                error "Quality Gate failed. Prod deploy aborted!"
                            }
                        }
                    }
                }
            }
        }

        stage('Manual Prod Approval') {
            when { expression { params.DEPLOY_ENV == 'prod' && (params.ACTION == 'deploy' || params.ACTION == 'build-deploy') } }
            steps {
                input message: "Approve PROD deployment for ${params.APP_NAME}?", ok: "Deploy"
            }
        }

        stage('Upload to Artifactory') {
            steps {
                script {
                    def server = Artifactory.server("${ARTIFACTORY}")
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "my_maven/target/${env.WAR_NAME}",
                                "target": "${REPO}/${params.APP_NAME}/"
                            }
                        ]
                    }"""
                    server.upload(spec: uploadSpec)
                    echo "✅ Uploaded ${env.WAR_NAME} to Artifactory at ${REPO}/${params.APP_NAME}/"
                }
            }
        }

        stage('Deploy to Tomcat') {
            when { expression { params.ACTION == 'deploy' || params.ACTION == 'build-deploy' } }
            steps {
                script {
                    def tomcatUrl = (params.DEPLOY_ENV == 'dev') ?
                        "http://localhost:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true" :
                        "http://172.26.170.164:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true"

                    sh """
                        curl -v -u admin:Anant@123 -T my_maven/target/${env.WAR_NAME} \
                        "${tomcatUrl}"
                    """
                    echo "✅ Deployed ${env.WAR_NAME} to ${params.DEPLOY_ENV.toUpperCase()} Tomcat"
                }
            }
        }
    }

    post {
        success {
            echo "✅ Build & Deploy SUCCESS for ${params.APP_NAME}"
        }
        failure {
            echo "❌ Build & Deploy FAILED for ${params.APP_NAME}"
        }
    }
}
