pipeline {
    agent any


    tools {
        maven 'Maven-3.9'
    }

    environment {
        ARTIFACTORY = 'Artifactory'
        REPO = 'libs-release-local'
    }
    parameters {
    choice(name: 'ACTION', choices: ['build', 'deploy', 'build-deploy'], description: 'Choose action')
    string(name: 'APP_NAME', defaultValue: 'sample', description: 'App name to deploy')
    choice(name: 'DEPLOY_ENV', choices: ['dev', 'prod'], description: 'Deployment environment')
    } 

 stages{
     stage('Checkout Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/anantlaghane/shell-script1.git',
                        credentialsId: 'Git'
                    ]]
                ])
              }
            }

        stage('Build and Upload') {
            when {
                expression { params.ACTION == 'build' || params.ACTION == 'build-deploy' }
            }
            steps {

                script {
                    sh 'cd my_maven && mvn clean package'
                    //sh "mv my_maven/target/*.war my_maven/target/${params.APP_NAME}.war"
                    def server = Artifactory.server("${ARTIFACTORY}")
                    def rtMaven = Artifactory.newMavenBuild()
                    rtMaven.tool = 'Maven-3.9'
                    rtMaven.resolver server: server, releaseRepo: 'maven', snapshotRepo: 'maven'
                    rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-release-local'

                     // Build timestamp
                    def buildTime = new Date().format("yyyyMMdd-HHmmss")
                    // Jenkins build number
                    def buildNumber = currentBuild.number

                    
                  // Auto-detect war and jar file names
                def jarFile = sh(script: "ls my_maven/target/*.jar | grep -v 'original' | grep -v 'sources' | head -1", returnStdout: true).trim()
                def warFile = sh(script: "ls my_maven/target/*.war | head -1", returnStdout: true).trim()

                  // Final artifact name with build number & timestamp
                    def warName = "${params.APP_NAME}-${buildNumber}-${buildTime}.war"
                    def jarName = "${params.APP_NAME}-${buildNumber}-${buildTime}.jar"
                    // Rename the war file
                    sh "mv my_maven/target/${params.APP_NAME}*-exec.jar my_maven/target/${jarName}" || true
                     sh "mv my_maven/target/${params.APP_NAME}.war my_maven/target/${warName}" || true
                    env.JAR_NAME = jarName 
                    env.WAR_NAME = warName


                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "my_maven/target/${jarName}",
                                "target": "${REPO}/${params.APP_NAME}/"                               },
                            {
                                "pattern": "my_maven/target/${warName}",
                                "target": "${REPO}/${params.APP_NAME}/"
                            }
                        ]
                    }"""
                    server.upload(spec: uploadSpec)
                }
            }
        }

        stage('Deploy to Tomcat') {
            when {
                expression { params.ACTION == 'deploy' || params.ACTION == 'build-deploy' }
            }
            steps {
                script {
                    // Choose URL based on DEPLOY_ENV
                    def tomcatUrl = ""
                    if (params.DEPLOY_ENV == 'dev') {
                        tomcatUrl = "http://localhost:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true"
                    } else if (params.DEPLOY_ENV == 'prod') {
                        tomcatUrl = "http://prod-server:8085/manager/text/deploy?path=/${params.APP_NAME}&update=true"  //reminder add one remote tomcat server and add this ip
                    }

                    echo "Deploying ${env.WAR_NAME} to ${params.DEPLOY_ENV} environment"
                    sh """
                        curl -v -u admin:Anant@123 -T my_maven/target/${env.WAR_NAME} \\
                        "${tomcatUrl}"
                    """
                }
            }
        }

    }
}